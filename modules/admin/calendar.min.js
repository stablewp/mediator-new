"use strict";

/******/
(function (modules) {
  // webpackBootstrap

  /******/
  // The module cache

  /******/
  var installedModules = {};
  /******/
  // The require function

  /******/

  function __webpack_require__(moduleId) {
    /******/
    // Check if module is in cache

    /******/
    if (installedModules[moduleId])
      /******/
      return installedModules[moduleId].exports;
    /******/
    // Create a new module (and put it into the cache)

    /******/

    var module = installedModules[moduleId] = {
      /******/
      exports: {},

      /******/
      id: moduleId,

      /******/
      loaded: false
      /******/

    };
    /******/
    // Execute the module function

    /******/

    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    // Flag the module as loaded

    /******/

    module.loaded = true;
    /******/
    // Return the exports of the module

    /******/

    return module.exports;
    /******/
  }
  /******/
  // expose the modules object (__webpack_modules__)

  /******/


  __webpack_require__.m = modules;
  /******/
  // expose the module cache

  /******/

  __webpack_require__.c = installedModules;
  /******/
  // __webpack_public_path__

  /******/

  __webpack_require__.p = "";
  /******/
  // Load entry module and return exports

  /******/

  return __webpack_require__(0);
  /******/
})(
/************************************************************************/

/******/
[
/* 0 */

/***/
function (module, exports) {
  // Var
  (function ($) {
    var d = document,
        w = window,
        search = window.location.search,
        history = window.history,
        domReady = function domReady(callback) {
      d.readyState === "interactive" || d.readyState === "complete" ? callback() : d.addEventListener("DOMContentLoaded", callback);
    },
        res = {}; // Calendar


    var href = w.location.href,
        body = d.querySelector('body'),
        ancestor = d.querySelector('#bk-med-wrapper'),
        parent = d.querySelector('#bk-calendar'),
        bkcals = d.querySelector('.bk-cals'),
        months = d.querySelectorAll('[data-calendar-area="month"]'),
        month = d.querySelectorAll('[data-calendar-area="month"]')[0],
        monthone = d.querySelectorAll('[data-calendar-area="month"]')[1],
        monthtwo = d.querySelectorAll('[data-calendar-area="month"]')[2],
        monththree = d.querySelectorAll('[data-calendar-area="month"]')[3],
        monthfour = d.querySelectorAll('[data-calendar-area="month"]')[4],
        monthfive = d.querySelectorAll('[data-calendar-area="month"]')[5],
        week = d.querySelector('.bk-week-default'),
        weekone = d.querySelector('.bk-week-one'),
        weektwo = d.querySelector('.bk-week-two'),
        weekthree = d.querySelector('.bk-week-three'),
        weekfour = d.querySelector('.bk-week-four'),
        weekfive = d.querySelector('.bk-week-five'),
        next = d.querySelectorAll('[data-calendar-toggle="next"]')[0],
        previous = d.querySelectorAll('[data-calendar-toggle="previous"]')[0],
        label = d.querySelectorAll('[data-calendar-label="month"]')[0],
        labelone = d.querySelectorAll('[data-calendar-label="month"]')[1],
        labeltwo = d.querySelectorAll('[data-calendar-label="month"]')[2],
        labelthree = d.querySelectorAll('[data-calendar-label="month"]')[3],
        labelfour = d.querySelectorAll('[data-calendar-label="month"]')[4],
        labelfive = d.querySelectorAll('[data-calendar-label="month"]')[5],
        dayinput = d.querySelector('input#booking_day'),
        activeDates = null,
        date = new Date(),
        nextone = new Date(),
        nexttwo = new Date(),
        nextthree = new Date(),
        nextfour = new Date(),
        nextfive = new Date(),
        todate = new Date(),
        adbtn = d.querySelector('.bk-admin-cal-arrows .actions button.toggle'),
        dayicons = [],
        isicon = false;

    function init() {
      date.setDate(1);
      nextone.setDate(1);
      nexttwo.setDate(1);
      nextthree.setDate(1);
      nextfour.setDate(1);
      nextfive.setDate(1);
      nextone.setMonth(nextone.getMonth() + 1);
      nexttwo.setMonth(nexttwo.getMonth() + 2);
      nextthree.setMonth(nextthree.getMonth() + 3);
      nextfour.setMonth(nextfour.getMonth() + 4);
      nextfive.setMonth(nextfive.getMonth() + 5);
      handleUrl();
      pullJSON().then(function (json) {
        var settings = json.settings,
            bookings = json.bookings.filter(function (booking) {
          return booking.parent == parent.getAttribute('data-cal');
        });
        parent.setAttribute('data-t0', settings.time_start0 + ' - ' + settings.time_end0);
        parent.setAttribute('data-t1', settings.time_start1 + ' - ' + settings.time_end1);
        parent.setAttribute('data-t2', settings.time_start2 + ' - ' + settings.time_end2);
        parent.setAttribute('data-checker', JSON.stringify(bookings));
        isbookIcon(parent.getAttribute('data-cal')).then(function (icons) {
          dayicons = icons;
          createMonth(bookings);
          createListeners(bookings);
          readyChildren();
        });
      }).catch(function (err) {
        console.log(err);
      });
      listUpdate();
    }

    function readyChildren() {
      ancestor.classList.add('ready-children');
    }

    function handleUrl() {
      // replace success message state
      if (href.indexOf('med_status') > -1) {
        history.replaceState('', document.title, href.replace(search, ''));
      }
    }

    function rmBooking(type, el, day, id) {
      // update parent json
      var booklist = JSON.parse(parent.getAttribute('data-checker')),
          filterlist = [];
      booklist.forEach(function (el) {
        if (el.id[0] != id) {
          filterlist.push(el);
        }
      });
      parent.setAttribute('data-checker', JSON.stringify(filterlist)); // end parent json

      day.classList.remove('bk-date--selected');

      if (type == 'half1') {
        day._tippy.destroy();

        if (el) {
          el.closest('tr').remove();
        }

        day.classList.remove('bk-date--half', 'bk-blank--both');
        day.removeAttribute('data-names');
        day.removeAttribute('data-id');
        day.removeAttribute('data-slot');
        day.removeAttribute('data-opentime');
        day.querySelector('.bk-half').remove();
      } else if (type == 'half2') {
        if (el) {
          el.closest('tr').remove();
        }

        day.classList.remove('bk-date--booked', 'bk-booked--half', 'bk-blank--both');
        day.classList.add('bk-date--half');
        day.insertAdjacentHTML('beforeend', "<div class=\"bk-half\"><div class=\"bk-rotate\"><div class=\"bk-half-block bk-half-first\"></div><div class=\"bk-half-block bk-half-last\"></div></div></div>");
        var ids = day.getAttribute('data-id').split(','),
            names = JSON.parse(day.getAttribute('data-names'));

        if (ids[0] == id) {
          day.setAttribute('data-id', ids[1]);
          day.setAttribute('data-names', "[\"".concat(names[1], "\"]"));
          day.setAttribute('data-slot', 'last');
          day.setAttribute('data-opentime', parent.getAttribute('data-t1')); // tippy

          day._tippy.destroy();

          day.setAttribute('data-tippy-content', "<p style=\"margin:0\">Morning just deleted</p>");
          tippy(day);
        } else {
          day.setAttribute('data-id', ids[0]);
          day.setAttribute('data-names', "[\"".concat(names[0], "\"]"));
          day.setAttribute('data-slot', 'first');
          day.setAttribute('data-opentime', parent.getAttribute('data-t2')); // tippy

          day._tippy.destroy();

          day.setAttribute('data-tippy-content', "<p style=\"margin:0\">Afternoon just deleted</p>");
          tippy(day);
        }
      } else {
        day._tippy.destroy();

        if (el) {
          el.closest('tr').remove();
        }

        day.classList.remove('bk-date--booked', 'bk-blank--both');
        day.removeAttribute('data-names');
        day.removeAttribute('data-id');

        if (day.querySelectorAll('.bk-half').length) {
          day.querySelector('.bk-half').remove();
        }
      }

      day.classList.remove('haspop');
    }

    function pullJSON() {
      return new Promise(function (resolve, reject) {
        // set up data
        var data = {
          action: 'call',
          security: Ajax.security,
          type: 'calendar',
          id: parent.getAttribute('data-cal'),
          admin: true
        };
        var postdata = new FormData();

        for (var i in data) {
          postdata.append(i, data[i]);
        } // Pull calendar data


        fetch(Ajax.ajaxurl, {
          method: 'POST',
          credentials: 'same-origin',
          body: postdata
        }).then(function (response) {
          return response.json();
        }).then(function (json) {
          res.settings = json; // then pull booking data

          data.type = 'bookings';
          postdata = new FormData();

          for (var _i in data) {
            postdata.append(_i, data[_i]);
          }

          fetch(Ajax.ajaxurl, {
            method: 'POST',
            credentials: 'same-origin',
            body: postdata
          }).then(function (response) {
            return response.json();
          }).then(function (json) {
            res.bookings = json;
            resolve(res);
          }).catch(function (err) {
            reject(err);
          });
        }).catch(function (err) {
          reject(err);
        });
      });
    }

    function createListeners(bookings) {
      // Next
      next.addEventListener('click', function (event) {
        clearCalendar();
        var nextMonth = date.getMonth() + 1,
            nextMonthone = nextone.getMonth() + 1,
            nextMonthtwo = nexttwo.getMonth() + 1,
            nextMonththree = nextthree.getMonth() + 1,
            nextMonthfour = nextfour.getMonth() + 1,
            nextMonthfive = nextfive.getMonth() + 1;
        date.setMonth(nextMonth);
        nextone.setMonth(nextMonthone);
        nexttwo.setMonth(nextMonthtwo);
        nextthree.setMonth(nextMonththree);
        nextfour.setMonth(nextMonthfour);
        nextfive.setMonth(nextMonthfive);
        createMonth(bookings);
        previous.classList.remove('bk-hidden');
      }); // Previous

      previous.addEventListener('click', function (event) {
        clearCalendar();
        date.setMonth(date.getMonth() - 1);
        nextone.setMonth(nextone.getMonth() - 1);
        nexttwo.setMonth(nexttwo.getMonth() - 1);
        nextthree.setMonth(nextthree.getMonth() - 1);
        nextfour.setMonth(nextfour.getMonth() - 1);
        nextfive.setMonth(nextfive.getMonth() - 1);
        createMonth(bookings);

        if (date.getMonth() == todate.getMonth() && date.getFullYear() == todate.getFullYear()) {
          previous.classList.add('bk-hidden');
        }
      });
      adbtn.addEventListener('click', function (event) {
        if (parent.classList.contains('hiding')) {
          parent.classList.remove('hiding');
          adbtn.innerHTML = 'Hide calendar';
        } else {
          parent.classList.add('hiding');
          adbtn.innerHTML = 'Show calendar';
        }
      });
    }

    function createDay(num, day, year, cal) {
      date.setHours(0, 0, 0, 0);
      todate.setHours(0, 0, 0, 0);
      var datetype;

      switch (cal) {
        case 'one':
          datetype = nextone;
          break;

        case 'two':
          datetype = nexttwo;
          break;

        case 'three':
          datetype = nextthree;
          break;

        case 'four':
          datetype = nextfour;
          break;

        case 'five':
          datetype = nextfive;
          break;

        default:
          datetype = date;
      }

      var newDay = d.createElement('div'),
          newWeek = d.createElement('span'),
          dateEl = d.createElement('span'),
          caldate = ('0' + datetype.getDate()).slice(-2) + '.' + ('0' + (datetype.getMonth() + 1)).slice(-2) + '.' + datetype.getFullYear();
      dateEl.innerHTML = num;
      dateEl.className = 'bk-date-span';
      newDay.className = 'bk-date';
      newDay.setAttribute('data-calendar-date', caldate);
      newDay.setAttribute('data-icon', false); // add off icon

      isicon = dayicons.find(function (el) {
        if (el == caldate) {
          return true;
        } else {
          return false;
        }
      });

      if (isicon) {
        newDay.setAttribute('data-icon', true);

        if (bkcals.getAttribute('data-icon') != 'false') {
          newDay.classList.add('holiday');
          newDay.setAttribute('data-tippy-content', "<p style=\"margin:0\">".concat(bkcals.getAttribute('data-holidaytext'), "</p>"));
          tippy(newDay);
          newDay.innerHTML = "<div class=\"bk-lg-icon\"><i class=\"".concat(bkcals.getAttribute('data-icon'), "\"></i></div>");
        }
      } // end add off icon


      var dayname = 'S';

      switch (day) {
        case 1:
          dayname = 'M';
          break;

        case 2:
          dayname = 'T';
          break;

        case 3:
          dayname = 'W';
          break;

        case 4:
          dayname = 'T';
          break;

        case 5:
          dayname = 'F';
          break;

        case 6:
          dayname = 'S';
          break;
      }

      newWeek.innerHTML = dayname; // if it's the first day of the month

      if (num === 1) {
        if (day === 0) {
          cal == 'first' ? newDay.style.marginLeft = 'calc(' + 6 * 14.28 + '% - 1px)' : newDay.style.marginLeft = 6 * 14.28 + '%';
        } else {
          newDay.style.marginLeft = (day - 1) * 14.28 + '%';
          cal == 'first' ? newDay.style.marginLeft = 'calc(' + (day - 1) * 14.28 + '% - 1px)' : newDay.style.marginLeft = (day - 1) * 14.28 + '%';
        }
      } // disable days


      if (date.getTime() < todate.getTime()) {
        newDay.classList.add('bk-date--disabled');
      } else if (day == 0 || day == 6) {
        newDay.classList.add('bk-date--disabled');
      } else {
        newDay.classList.add('bk-date--active');
        newDay.setAttribute('data-calendar-status', 'active');

        if (date.getTime() == todate.getTime()) {
          newDay.classList.add('bk-date--today');
        }
      }

      newDay.appendChild(dateEl);

      switch (cal) {
        case 'default':
          month.appendChild(newDay);
          week.appendChild(newWeek);
          break;

        case 'one':
          monthone.appendChild(newDay);
          weekone.appendChild(newWeek);
          break;

        case 'two':
          monthtwo.appendChild(newDay);
          weektwo.appendChild(newWeek);
          break;

        case 'three':
          monththree.appendChild(newDay);
          weekthree.appendChild(newWeek);
          break;

        case 'four':
          monthfour.appendChild(newDay);
          weekfour.appendChild(newWeek);
          break;

        case 'five':
          monthfive.appendChild(newDay);
          weekfive.appendChild(newWeek);
          break;
      }
    }

    function createMonth(bookings) {
      var currentMonth = date.getMonth(),
          currentnextone = nextone.getMonth(),
          currentnexttwo = nexttwo.getMonth(),
          currentnextthree = nextthree.getMonth(),
          currentnextfour = nextfour.getMonth(),
          currentnextfive = nextfive.getMonth();

      while (date.getMonth() === currentMonth) {
        createDay(date.getDate(), date.getDay(), date.getFullYear(), 'default');
        date.setDate(date.getDate() + 1);
      }

      while (nextone.getMonth() === currentnextone) {
        createDay(nextone.getDate(), nextone.getDay(), nextone.getFullYear(), 'one');
        nextone.setDate(nextone.getDate() + 1);
      }

      while (nexttwo.getMonth() === currentnexttwo) {
        createDay(nexttwo.getDate(), nexttwo.getDay(), nexttwo.getFullYear(), 'two');
        nexttwo.setDate(nexttwo.getDate() + 1);
      }

      while (nextthree.getMonth() === currentnextthree) {
        createDay(nextthree.getDate(), nextthree.getDay(), nextthree.getFullYear(), 'three');
        nextthree.setDate(nextthree.getDate() + 1);
      }

      while (nextfour.getMonth() === currentnextfour) {
        createDay(nextfour.getDate(), nextfour.getDay(), nextfour.getFullYear(), 'four');
        nextfour.setDate(nextfour.getDate() + 1);
      }

      while (nextfive.getMonth() === currentnextfive) {
        createDay(nextfive.getDate(), nextfive.getDay(), nextfive.getFullYear(), 'five');
        nextfive.setDate(nextfive.getDate() + 1);
      } // while loop trips over and day is at 30/31, bring it back


      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      nextone.setDate(1);
      nextone.setMonth(nextone.getMonth() - 1);
      nexttwo.setDate(1);
      nexttwo.setMonth(nexttwo.getMonth() - 1);
      nextthree.setDate(1);
      nextthree.setMonth(nextthree.getMonth() - 1);
      nextfour.setDate(1);
      nextfour.setMonth(nextfour.getMonth() - 1);
      nextfive.setDate(1);
      nextfive.setMonth(nextfive.getMonth() - 1);
      label.innerHTML = monthsAsString(date.getMonth()).substring(0, 3) + ' <br><span>' + date.getFullYear() + '</span>';
      labelone.innerHTML = monthsAsString(nextone.getMonth()).substring(0, 3) + ' <br><span>' + nextone.getFullYear() + '</span>';
      labeltwo.innerHTML = monthsAsString(nexttwo.getMonth()).substring(0, 3) + ' <br><span>' + nexttwo.getFullYear() + '</span>';
      labelthree.innerHTML = monthsAsString(nextthree.getMonth()).substring(0, 3) + ' <br><span>' + nextthree.getFullYear() + '</span>';
      labelfour.innerHTML = monthsAsString(nextfour.getMonth()).substring(0, 3) + ' <br><span>' + nextfour.getFullYear() + '</span>';
      labelfive.innerHTML = monthsAsString(nextfive.getMonth()).substring(0, 3) + ' <br><span>' + nextfive.getFullYear() + '</span>'; // set up bookings for visible months

      var datemonth = date.getMonth() < 9 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1,
          nextonemonth = nextone.getMonth() < 9 ? '0' + (nextone.getMonth() + 1) : nextone.getMonth() + 1,
          nexttwomonth = nexttwo.getMonth() < 9 ? '0' + (nexttwo.getMonth() + 1) : nexttwo.getMonth() + 1,
          nextthreemonth = nextthree.getMonth() < 9 ? '0' + (nextthree.getMonth() + 1) : nextthree.getMonth() + 1,
          nextfourmonth = nextfour.getMonth() < 9 ? '0' + (nextfour.getMonth() + 1) : nextfour.getMonth() + 1,
          nextfivemonth = nextfive.getMonth() < 9 ? '0' + (nextfive.getMonth() + 1) : nextfive.getMonth() + 1,
          match = datemonth + '.' + date.getFullYear(),
          matchone = nextonemonth + '.' + nextone.getFullYear(),
          matchtwo = nexttwomonth + '.' + nexttwo.getFullYear(),
          matchthree = nextthreemonth + '.' + nextthree.getFullYear(),
          matchfour = nextfourmonth + '.' + nextfour.getFullYear(),
          matchfive = nextfivemonth + '.' + nextfive.getFullYear(); // filter bookings for shown months only

      bookings = bookings.filter(function (booking) {
        if (booking.date.includes(match) || booking.date.includes(matchone) || booking.date.includes(matchtwo) || booking.date.includes(matchthree) || booking.date.includes(matchfour) || booking.date.includes(matchfive)) {
          return booking;
        }
      });

      function compare(a, b) {
        if (a.date > b.date) {
          return -1;
        }

        if (a.date < b.date) {
          return 1;
        }

        return 0;
      }

      bookings.sort(compare); // make two half days one day booked

      bookings = bookings.filter(function (obj, pos, arr) {
        arr[pos].tippy = arr[pos].status;

        if (arr.map(function (unique) {
          return unique['date'];
        }).indexOf(obj['date']) === pos) {
          if (arr[pos].type == 'full') {
            arr[pos].full = true;
          }

          return obj;
        } else {
          arr[pos - 1].tippy = arr[pos - 1].status + ',' + arr[pos].status;

          if (arr[pos].status == 'pending' || arr[pos - 1].status == 'pending') {
            arr[pos - 1].status = 'pending';
          }

          if (arr[pos].client == true || arr[pos - 1].client == true) {
            arr[pos - 1].client = true;
          }

          if (arr[pos].clientloc != '' || arr[pos - 1].clientloc == '') {
            arr[pos - 1].clientloc = arr[pos].clientloc;
          }

          arr[pos - 1].full = true;

          if (arr[pos].type == 'last') {
            arr[pos - 1].details.push(arr[pos].details[0]);
            arr[pos - 1].id.push(arr[pos].id[0]);
          } else {
            arr[pos - 1].details.unshift(arr[pos].details[0]);
            arr[pos - 1].id.unshift(arr[pos].id[0]);
          }
        }
      });
      createBookings(bookings);
      dateClick();
    }

    function createBookings(bookings) {
      var exists = Object.keys(bookings).some(function (i) {
        var date = bookings[i].date,
            type = bookings[i].type,
            status = bookings[i].status,
            statusTip = bookings[i].tippy,
            full = bookings[i].full,
            id = bookings[i].id,
            details = bookings[i].details,
            blank = bookings[i].blank,
            client = bookings[i].client,
            clientloc = bookings[i].clientloc,
            detarray = [],
            newDay = d.querySelector(".bk-date[data-calendar-date=\"".concat(date, "\"]"));
        details.forEach(function (el) {
          detarray.push('"' + el + '"');
        }); // console.log(date)
        // console.log(d.querySelector(`.bk-date[data-calendar-date="${date}"]`))

        newDay.setAttribute('data-names', '[' + detarray + ']');
        newDay.setAttribute('data-id', id);

        if (client) {
          newDay.setAttribute('data-client', true);
        }

        if (clientloc) {
          newDay.setAttribute('data-clientloc', clientloc);
        }

        if (type == 'first' || type == 'last') {
          if (!full) {
            newDay.classList.add('bk-date--half');
            newDay.setAttribute('data-slot', type);

            if (type == 'first') {
              newDay.setAttribute('data-opentime', parent.getAttribute('data-t2'));

              if (status == 'pending') {
                newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning pending</p>');
              } else {
                newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning booked</p>');
              }
            } else {
              newDay.setAttribute('data-opentime', parent.getAttribute('data-t1'));

              if (status == 'pending') {
                newDay.setAttribute('data-tippy-content', '<p style="margin:0">Afternoon pending</p>');
              } else {
                newDay.setAttribute('data-tippy-content', '<p style="margin:0">Afternoon booked</p>');
              }
            }

            newDay.insertAdjacentHTML('beforeend', "<div class=\"bk-half\"><div class=\"bk-rotate\"><div class=\"bk-half-block bk-half-first\"></div><div class=\"bk-half-block bk-half-last\"></div></div></div>");
          } else {
            newDay.classList.add('bk-date--booked');
            newDay.classList.add('bk-booked--half');

            if (blank == 'true') {
              newDay.classList.add('bk-blank--both');
            }

            newDay.insertAdjacentHTML('beforeend', "<div class=\"bk-date-indicator\">2</div>");
            statusTip = statusTip.split(',');

            if (statusTip[0] == 'pending' && statusTip[1] == 'pending') {
              newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning pending<br>Afternoon pending</p>');
            } else if (statusTip[0] == 'pending' && statusTip[1] == 'publish') {
              newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning pending<br>Afternoon booked</p>');
            } else if (statusTip[0] == 'publish' && statusTip[1] == 'pending') {
              newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning booked<br>Afternoon pending</p>');
            } else {
              newDay.setAttribute('data-tippy-content', '<p style="margin:0">Morning booked<br>Afternoon booked</p>');
            }
          }
        } else {
          newDay.classList.add('bk-date--booked'); // newDay.insertAdjacentHTML('beforeend',`<div class="bk-date-indicator">1</div>`)

          if (status == 'pending') {
            newDay.setAttribute('data-tippy-content', '<p style="margin:0">Full day pending</p>');
          } else {
            newDay.setAttribute('data-tippy-content', '<p style="margin:0">Full day booked</p>');
          }
        }

        if (status == 'pending') {
          newDay.classList.add('bk-date-pending');
        }

        tippy(newDay);
      });
      ancestor.classList.remove('bk-loading');
    }

    function dateClick() {
      activeDates = d.querySelectorAll('[data-calendar-status="active"]');

      var _loop = function _loop(i) {
        activeDates[i].addEventListener('click', function (event) {
          var dotdate = activeDates[i].dataset.calendarDate;
          removeActiveClass();

          if (activeDates[i].classList.contains('haspop')) {
            if (!activeDates[i].classList.contains('bk-date--booked')) {
              activeDates[i].classList.remove('haspop');
            }
          } else {
            activeDates[i].classList.add('bk-date--selected');
            parent.classList.add('popup-open');
            popOver(activeDates[i], dotdate);
          }
        });
      };

      for (var i = 0; i < activeDates.length; i++) {
        _loop(i);
      }
    }

    function popOver(el, date) {
      var dotless = date.replace(/\./g, ','); // rm all

      months.forEach(function (el) {
        var haspop = el.querySelectorAll('.bk-date.haspop'),
            days = el.querySelectorAll('.bk-date');
        haspop.forEach(function (el) {
          el.removeChild(el.querySelector('.bk-popup'));
        });
        days.forEach(function (el) {
          return el.classList.remove('haspop');
        });
      });
      el.classList.add('haspop');
      var popuptype = el.classList.contains('bk-date--booked') ? 'bk-popfull' : '';

      if (el.classList.contains('bk-date--half')) {
        // booked half
        var names = JSON.parse(el.getAttribute('data-names')),
            ids = el.getAttribute('data-id').split(','),
            onlyrealbook,
            checkicon,
            halfbookslot;

        if (names[0].indexOf('Booked off edited') > -1) {
          onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
        } else if (names[0].indexOf('Booked off') > -1) {
          onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">Edit</label></a>");
        } else {
          onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
        }

        if (el.getAttribute('data-slot') == 'first') {
          halfbookslot = 'last';
        } else if (el.getAttribute('data-slot') == 'last') {
          halfbookslot = 'first';
        } // set icon


        if (el.getAttribute('data-icon') == 'true') {
          checkicon = 'checked';
        } else {
          checkicon = '';
        } // add half days to popup


        sweetalert.fire({
          title: '<strong>Date is half booked</strong>',
          type: false,
          animation: false,
          customClass: 'animated bk-animated zoomIn bk-dark',
          width: '410px',
          html: "Select a booking below to view or modify it<br><br>\n\t\t\t\t\t\t\t\t<li class=\"admin-popup-listing\">\n\t\t\t\t\t\t\t\t\t<span class=\"bookedoffname\">".concat(names[0], "</span>\n\t\t\t\t\t\t\t\t\t").concat(onlyrealbook, "\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li class=\"admin-popup-listing lb-listing\">\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"booking-time\" id=\"bk-time-").concat(halfbookslot, "\" value=\"").concat(halfbookslot, "\">\n\t\t\t\t\t\t\t\t\t<div class=\"time-checkbox\"></div>\n\t\t\t\t\t\t\t\t\t<label for=\"bk-time-").concat(halfbookslot, "\"><strong>Half day:</strong> ").concat(el.getAttribute('data-opentime'), "</label>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<button type=\"button\" class=\"swal2-styled med-book-btn med-bookoff\">Book this</button>\n\t\t\t\t\t\t\t<div class=\"bk-dayhasicon\">\n\t\t\t\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t\t\t  <input type=\"checkbox\" ").concat(checkicon, ">\n\t\t\t\t\t\t\t\t  <span class=\"slider round\"></span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<h6>Enable icon on this day</h6>\n\t\t\t\t\t\t\t</div>"),
          showCloseButton: true,
          showCancelButton: false,
          showConfirmButton: false
        }).then(function (response) {
          if (response.dismiss) {
            el.classList.remove('haspop');
            el.classList.remove('bk-date--selected');
          }
        }); // enable book btns

        var listItem = d.querySelectorAll('.admin-popup-listing'),
            listBookoff = d.querySelector('.med-bookoff');
        listItem.forEach(function (el) {
          el.addEventListener('click', function (e) {
            d.querySelectorAll('.admin-popup-listing').forEach(function (el) {
              return el.classList.remove('lb-checked');
            });
            el.classList.add('lb-checked');

            if (el.classList.contains('lb-listing')) {
              listBookoff.classList.add('bookaction-enabled');
            }
          });
        }); // custom btn events

        listBookoff.addEventListener('click', function (e) {
          if (listBookoff.classList.contains('bookaction-enabled')) {
            listBookoff.innerHTML = 'processing..';
            var url = d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/book_off.php',
                bookofftime,
                bookoffsession;

            if (d.querySelector('.lb-checked input').value == 'first') {
              bookofftime = parent.getAttribute('data-t1').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Morning Booking';
            } else if (d.querySelector('.lb-checked input').value == 'last') {
              bookofftime = parent.getAttribute('data-t2').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Afternoon Booking';
            } else {
              bookofftime = parent.getAttribute('data-t0').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Full-day Booking';
            }

            bookOff(url, bookofftime, bookoffsession, listBookoff);
          }
        }); // Now load booking popup

        bookingPopupClick(el, sweetalert, parent.getAttribute('data-t1'), parent.getAttribute('data-t2'));
        dayIcon();
      } else if (el.classList.contains('bk-date--booked')) {
        // booked both
        if (el.classList.contains('bk-booked--half')) {
          // set icon
          var _checkicon;

          if (el.getAttribute('data-icon') == 'true') {
            _checkicon = 'checked';
          } else {
            _checkicon = '';
          } // mk arr from names


          var _names = JSON.parse(el.getAttribute('data-names')),
              _ids = el.getAttribute('data-id').split(','),
              _onlyrealbook,
              onlyrealbook2; // isbook1


          if (_names[0].indexOf('Booked off edited') > -1) {
            _onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          } else if (_names[0].indexOf('Booked off') > -1) {
            _onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">Edit</label></a>");
          } else {
            _onlyrealbook = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[0], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[0], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[0], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          } // isbook2


          if (_names[1].indexOf('Booked off edited') > -1) {
            onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[1], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[1], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[1], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          } else if (_names[1].indexOf('Booked off') > -1) {
            onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[1], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[1], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[1], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">Edit</label></a>");
          } else {
            onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(_ids[1], "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(_ids[1], "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(_ids[1], "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          } // add half days to popup


          sweetalert.fire({
            title: '<strong>Date is fully booked</strong>',
            type: false,
            animation: false,
            customClass: 'animated bk-animated zoomIn bk-dark',
            width: '410px',
            html: "Select a booking below to view or modify it<br><br>\n\t\t\t\t\t\t\t\t<li class=\"admin-popup-listing\"><span class=\"bookedoffname\">".concat(_names[0], "</span><a href=\"\">\n\t\t\t\t\t\t\t\t\t").concat(_onlyrealbook, "\n\t\t\t\t\t\t\t\t</a></li>\n\t\t\t\t\t\t\t\t<li class=\"admin-popup-listing\"><span class=\"bookedoffname\">").concat(_names[1], "</span><a href=\"\">\n\t\t\t\t\t\t\t\t\t").concat(onlyrealbook2, "\n\t\t\t\t\t\t\t\t</a></li>\n\t\t\t\t\t\t\t\t<div class=\"bk-dayhasicon\">\n\t\t\t\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t\t\t\t  <input type=\"checkbox\" ").concat(_checkicon, ">\n\t\t\t\t\t\t\t\t\t  <span class=\"slider round\"></span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<h6>Enable icon on this day</h6>\n\t\t\t\t\t\t\t\t</div>"),
            showCloseButton: true,
            showCancelButton: false,
            showConfirmButton: false
          }).then(function (response) {
            if (response.dismiss) {
              el.classList.remove('haspop');
              el.classList.remove('bk-date--selected');
            }
          }); // Now load booking popup

          bookingPopupClick(el, sweetalert, parent.getAttribute('data-t1'), parent.getAttribute('data-t2'));
          dayIcon();
        } else {
          // set icon
          var _checkicon2;

          if (el.getAttribute('data-icon') == 'true') {
            _checkicon2 = 'checked';
          } else {
            _checkicon2 = '';
          } // add full day to popup


          var _onlyrealbook2,
              getname = JSON.parse(el.getAttribute('data-names'));

          if (el.getAttribute('data-names').indexOf('Booked off edited') > -1) {
            _onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(el.getAttribute('data-id'), "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          } else if (el.getAttribute('data-names').indexOf('Booked off') > -1) {
            _onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(el.getAttribute('data-id'), "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\" data-parent=\"").concat(parent.getAttribute('data-cal'), "\">Edit</label></a>");
          } else {
            _onlyrealbook2 = "<a href=\"?page=med-bookings&action=delete&medpost=".concat(el.getAttribute('data-id'), "&_wpnonce=").concat(d.querySelector('.bk-booking-list').getAttribute('data-random'), "\" class=\"listpopup-delete-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\"><label>Delete</label></a><a href=\"\"><label class=\"listpopup-view-btn\" data-id=\"").concat(el.getAttribute('data-id'), "\"  data-parent=\"").concat(parent.getAttribute('data-cal'), "\">View</label></a>");
          }

          sweetalert.fire({
            title: '<strong>Date is fully booked</strong>',
            type: false,
            animation: false,
            customClass: 'animated bk-animated zoomIn bk-dark',
            width: '410px',
            html: "Select a booking below to view or modify it<br><br>\n\t\t\t\t\t\t\t\t\t<li class=\"admin-popup-listing\"><span class=\"bookedoffname\">".concat(getname[0], "</span><a href=\"\">\n\t\t\t\t\t\t\t\t\t").concat(_onlyrealbook2, "\n\t\t\t\t\t\t\t\t</a></li>\n\t\t\t\t\t\t\t\t<div class=\"bk-dayhasicon\">\n\t\t\t\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t\t\t\t  <input type=\"checkbox\" ").concat(_checkicon2, ">\n\t\t\t\t\t\t\t\t\t  <span class=\"slider round\"></span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<h6>Enable icon on this day</h6>\n\t\t\t\t\t\t\t\t</div>"),
            showCloseButton: true,
            showCancelButton: false,
            showConfirmButton: false
          }).then(function (response) {
            if (response.dismiss) {
              el.classList.remove('haspop');
              el.classList.remove('bk-date--selected');
            }
          }); // Now load booking popup

          bookingPopupClick(el, sweetalert, parent.getAttribute('data-t1'), parent.getAttribute('data-t2'));
          dayIcon();
        }
      } else {
        // set icon
        var _checkicon3;

        if (el.getAttribute('data-icon') == 'true') {
          _checkicon3 = 'checked';
        } else {
          _checkicon3 = '';
        } // fresh day


        sweetalert.fire({
          title: '<strong>Booking actions:</strong>',
          type: false,
          animation: false,
          customClass: 'animated bk-animated zoomIn bk-dark',
          width: '410px',
          html: "Create a booking for this day<br><br>\n\t\t\t\t\t\t\t<li class=\"admin-popup-listing lb-listing\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"booking-time\" id=\"bk-time-full\" value=\"full\">\n\t\t\t\t\t\t\t\t<div class=\"time-checkbox\"></div>\n\t\t\t\t\t\t\t\t<label for=\"bk-time-full\"><strong>Full day:</strong> ".concat(parent.getAttribute('data-t0'), "</label>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class=\"admin-popup-listing lb-listing\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"booking-time\" id=\"bk-time-first\" value=\"first\">\n\t\t\t\t\t\t\t\t<div class=\"time-checkbox\"></div>\n\t\t\t\t\t\t\t\t<label for=\"bk-time-first\"><strong>Half day:</strong> ").concat(parent.getAttribute('data-t1'), "</label>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class=\"admin-popup-listing lb-listing\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"booking-time\" id=\"bk-time-last\" value=\"last\">\n\t\t\t\t\t\t\t\t<div class=\"time-checkbox\"></div>\n\t\t\t\t\t\t\t\t<label for=\"bk-time-last\"><strong>Half day:</strong> ").concat(parent.getAttribute('data-t2'), "</label>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<button type=\"button\" class=\"swal2-styled med-book-btn med-bookoff\">Book this</button>\n\t\t\t\t\t\t\t<div class=\"bk-dayhasicon\">\n\t\t\t\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t\t\t  <input type=\"checkbox\" ").concat(_checkicon3, ">\n\t\t\t\t\t\t\t\t  <span class=\"slider round\"></span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<h6>Enable icon on this day</h6>\n\t\t\t\t\t\t\t</div>"),
          showCloseButton: true,
          showCancelButton: false,
          showConfirmButton: false
        }).then(function (response) {
          if (response.dismiss) {
            el.classList.remove('haspop');
            el.classList.remove('bk-date--selected');
          }
        }); // enable book btns

        var _listItem = d.querySelectorAll('.admin-popup-listing'),
            _listBookoff = d.querySelector('.med-bookoff');

        _listItem.forEach(function (el) {
          el.addEventListener('click', function (e) {
            d.querySelectorAll('.admin-popup-listing').forEach(function (el) {
              return el.classList.remove('lb-checked');
            });
            el.classList.add('lb-checked');

            if (el.classList.contains('lb-listing')) {
              _listBookoff.classList.add('bookaction-enabled');
            }
          });
        }); // custom btn events


        _listBookoff.addEventListener('click', function (e) {
          if (_listBookoff.classList.contains('bookaction-enabled')) {
            _listBookoff.innerHTML = 'processing..';
            var url = d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/book_off.php',
                bookofftime,
                bookoffsession;

            if (d.querySelector('.lb-checked input').value == 'first') {
              bookofftime = parent.getAttribute('data-t1').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Morning Booking';
            } else if (d.querySelector('.lb-checked input').value == 'last') {
              bookofftime = parent.getAttribute('data-t2').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Afternoon Booking';
            } else {
              bookofftime = parent.getAttribute('data-t0').split(' ');
              bookofftime = bookofftime[0];
              bookoffsession = 'Full-day Booking';
            }

            bookOff(url, bookofftime, bookoffsession, _listBookoff);
          }
        });

        dayIcon();
      }
    }

    function bookOff(url, bookofftime, bookoffsession, listBookoff) {
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          fd = d.querySelector('.bk-date--selected.haspop').getAttribute('data-calendar-date').split('.');
      fd = new Date("".concat(fd[2], "-").concat(fd[1], "-").concat(fd[0], " 00:00:00"));
      fd = "".concat(monthNames[fd.getMonth()], " ").concat(fd.getDate(), ", ").concat(fd.getFullYear());
      fetch(url, {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          calendar: parent.getAttribute('data-cal'),
          title: "".concat(fd, " &hyphen; ").concat(bookoffsession),
          day: d.querySelector('.bk-date--selected.haspop').getAttribute('data-calendar-date'),
          slot: d.querySelector('.lb-checked input').value
        })
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        setTimeout(function () {
          listBookoff.innerHTML = 'Book this';

          if (data.message == 'exists') {
            sweetalert.fire({
              title: 'Booking exists!',
              text: 'A booking was made before this one',
              type: 'warning',
              showConfirmButton: false,
              timer: 2400
            }).then(function (result) {
              window.location.reload();
            });
          } else if (data.message == 'error') {
            sweetalert.fire({
              title: 'Oops!',
              text: 'There was an error, please contact support',
              type: 'error',
              showConfirmButton: false,
              timer: 2400
            }).then(function (result) {
              window.location.reload();
            });
          } else if (data.message == 'success') {
            sweetalert.fire({
              title: 'Booking success!',
              text: 'This session has been reserved.',
              type: 'success',
              showConfirmButton: false,
              timer: 2000
            }).then(function (result) {
              // add to json parent
              var jsonsessiontext = '';

              if (data.slot == 'full') {
                jsonsessiontext = ["Full session - Booked off"];
              } else if (data.slot == 'first') {
                jsonsessiontext = ["First session - Booked off"];
              } else {
                jsonsessiontext = ["Last session - Booked off"];
              }

              var booklist = JSON.parse(parent.getAttribute('data-checker'));
              booklist.push({
                "date": data.date,
                "type": data.slot,
                "parent": parent.getAttribute('data-cal'),
                "id": [data.post],
                "status": "publish",
                "details": jsonsessiontext,
                "location": null
              });

              function replacer(key, value) {
                return value.replace(/[^\w\s]/gi, '');
              }

              parent.setAttribute('data-checker', JSON.stringify(booklist)); // update for front

              var theday = d.querySelector('.bk-date--selected.haspop');

              if (theday.classList.contains('bk-date--half')) {
                // date has a half booking
                theday.classList.remove('bk-date--half');
                theday.classList.add('bk-date--booked', 'bk-booked--half');
                theday.querySelector('.bk-half').remove();

                if (theday.getAttribute('data-names').indexOf('Booked off') > -1) {
                  if (theday.getAttribute('data-names').indexOf('Booked off edited') < 0) {
                    theday.classList.add('bk-blank--both');
                  }
                }

                if (bookoffsession == 'Morning Booking') {
                  theday.setAttribute('data-names', theday.getAttribute('data-names').replace('[', '["First session - Booked off",'));
                  theday.setAttribute('data-id', data.post + ',' + theday.getAttribute('data-id')); // tippy

                  theday._tippy.destroy();

                  theday.setAttribute('data-tippy-content', "<p style=\"margin:0\">Morning just booked</p>");
                  tippy(theday);
                } else if (bookoffsession == 'Afternoon Booking') {
                  theday.setAttribute('data-names', theday.getAttribute('data-names').replace(']', ',"Last session - Booked off"]'));
                  theday.setAttribute('data-id', theday.getAttribute('data-id') + ',' + data.post); // tippy

                  theday._tippy.destroy();

                  theday.setAttribute('data-tippy-content', "<p style=\"margin:0\">Afternoon just booked</p>");
                  tippy(theday);
                }

                theday.insertAdjacentHTML('beforeend', "<div class=\"bk-date-indicator\">2</div>");
              } else {
                if (bookoffsession == 'Morning Booking') {
                  theday.classList.add('bk-date--half');
                  theday.insertAdjacentHTML('beforeend', "<div class=\"bk-half\"><div class=\"bk-rotate\"><div class=\"bk-half-block bk-half-first\"></div><div class=\"bk-half-block bk-half-last\"></div></div></div>");
                  theday.setAttribute('data-names', '["First session - Booked off"]');
                  theday.setAttribute('data-id', data.post);
                  theday.setAttribute('data-slot', 'first');
                  theday.setAttribute('data-opentime', parent.getAttribute('data-t2')); // tippy

                  theday.setAttribute('data-tippy-content', "<p style=\"margin:0\">Morning just booked</p>");
                  tippy(theday);
                } else if (bookoffsession == 'Afternoon Booking') {
                  theday.classList.add('bk-date--half');
                  theday.insertAdjacentHTML('beforeend', "<div class=\"bk-half\"><div class=\"bk-rotate\"><div class=\"bk-half-block bk-half-first\"></div><div class=\"bk-half-block bk-half-last\"></div></div></div>");
                  theday.setAttribute('data-names', '["Last session - Booked off"]');
                  theday.setAttribute('data-id', data.post);
                  theday.setAttribute('data-slot', 'last');
                  theday.setAttribute('data-opentime', parent.getAttribute('data-t1')); // tippy

                  theday.setAttribute('data-tippy-content', "<p style=\"margin:0\">Afternoon just booked</p>");
                  tippy(theday);
                } else {
                  theday.classList.add('bk-date--booked');
                  theday.setAttribute('data-names', '["Full session - Booked off"]');
                  theday.setAttribute('data-id', data.post); // theday.insertAdjacentHTML('beforeend',`<div class="bk-date-indicator">1</div>`)
                  // tippy

                  theday.setAttribute('data-tippy-content', "<p style=\"margin:0\">Full session just booked</p>");
                  tippy(theday);
                }
              }

              theday.classList.remove('bk-date--selected');
              theday.classList.remove('haspop');
            });
          } else {
            sweetalert.fire({
              title: 'Oops!',
              text: 'There was an error, please contact support',
              type: 'error',
              showConfirmButton: false,
              timer: 2400
            }).then(function (result) {
              window.location.reload();
            });
          }
        }, 500);
      });
    }

    function monthsAsString(monthIndex) {
      return ['January', 'Febuary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][monthIndex];
    }

    function clearCalendar() {
      month.innerHTML = '';
      monthone.innerHTML = '';
      monthtwo.innerHTML = '';
      monththree.innerHTML = '';
      monthfour.innerHTML = '';
      monthfive.innerHTML = '';
      week.innerHTML = '';
      weekone.innerHTML = '';
      weektwo.innerHTML = '';
      weekthree.innerHTML = '';
      weekfour.innerHTML = '';
      weekfive.innerHTML = '';
    }

    function removeActiveClass() {
      for (var i = 0; i < activeDates.length; i++) {
        activeDates[i].classList.remove('bk-date--selected');
        parent.classList.remove('popup-open');
      }
    }

    function bookingPopupClick(el, sa, f, l) {
      var popbtn = sa.getContent().querySelectorAll('.listpopup-view-btn');
      popbtn.forEach(function (popbtn) {
        popbtn.addEventListener('click', function (event) {
          event.preventDefault();
          event.stopPropagation();
          var data = {
            action: 'call',
            security: Ajax.security,
            type: 'listpopup',
            id: popbtn.getAttribute('data-id'),
            parent: popbtn.getAttribute('data-parent'),
            first: f,
            last: l
          };
          var postdata = new FormData();

          for (var i in data) {
            postdata.append(i, data[i]);
          }

          fetch(Ajax.ajaxurl, {
            method: 'POST',
            credentials: 'same-origin',
            body: postdata
          }).then(function (response) {
            return response.json();
          }).then(function (json) {
            openEditableLayer(json, sa, el, 'haspop');
          }).catch(function (err) {
            console.log(err);
          });
        });
      });
      var delbtn = sa.getContent().querySelectorAll('.listpopup-delete-btn');
      delbtn.forEach(function (btn) {
        btn.addEventListener('click', function (event) {
          event.preventDefault();
          event.stopPropagation();
          sweetalert.fire({
            title: 'Are you sure you want <br>to delete/reject this item?',
            text: "This session will be deleted permanantly and cannot be brought back.",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
          }).then(function (result) {
            if (result.dismiss != 'cancel' && result.dismiss != 'backdrop') {
              sweetalert.fire({
                title: 'Deleted!',
                text: 'This session has been deleted..',
                type: 'success',
                showConfirmButton: false,
                timer: 1800
              }).then(function (result) {
                $.ajax({
                  type: 'post',
                  url: btn.getAttribute('href'),
                  success: function success(data) {
                    var theday = d.querySelector('.bk-date.haspop');

                    if (theday.classList.contains('bk-date--booked') && theday.classList.contains('bk-booked--half')) {
                      // date has two half bookings
                      rmBooking('half2', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, btn.getAttribute('data-id'));
                    } else if (theday.classList.contains('bk-date--half')) {
                      // date has one half booking
                      rmBooking('half1', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, btn.getAttribute('data-id'));
                    } else if (theday.classList.contains('bk-date--booked')) {
                      // date has one full booking
                      rmBooking('full', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, btn.getAttribute('data-id'));
                    }
                  },
                  error: function error(err) {
                    console.log(err);
                  }
                });
              });
            } else {
              // this is delete from popup list side btn
              d.querySelector('.bk-date.haspop').classList.remove('haspop');
            }
          });
        });
      });
    }

    function dayIcon() {
      var checkbox = d.querySelector('.bk-dayhasicon input');
      checkbox.addEventListener('click', function (e) {
        if (checkbox.classList.contains('bk-busy')) {
          e.preventDefault();
          return false;
        }
      }); // checkbox.checked = true

      checkbox.addEventListener('change', function (e) {
        var isChecked = d.querySelector('.bk-dayhasicon input').checked,
            day = d.querySelector('.bk-date--selected.haspop').getAttribute('data-calendar-date'),
            calendar = parent.getAttribute('data-cal');
        checkbox.classList.add('bk-busy');

        if (isChecked) {
          setIcon(true, day, calendar);
        } else {
          setIcon(false, day, calendar);
        }
      });
    }

    function isbookIcon(thecal) {
      return new Promise(function (resolve, reject) {
        fetch(d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/get_icon.php', {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            cal: thecal
          })
        }).then(function (response) {
          return response.json();
        }).then(function (data) {
          resolve(data);
        }).catch(function (err) {
          reject(err);
        });
      });
    }

    function setIcon(thestate, theday, thecal) {
      fetch(d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/add_icon.php', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          state: thestate,
          day: theday,
          cal: thecal
        })
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        if (data == 'exists') {
          alert('already marked off');
        } else {
          var iconday = d.querySelector('.bk-date.haspop');
          iconday.setAttribute('data-tippy-content', "<p style=\"margin:0\">".concat(bkcals.getAttribute('data-holidaytext'), "</p>"));
          tippy(iconday);

          if (data == 'rm') {
            d.querySelector('.bk-dayhasicon input').classList.remove('bk-busy');
            iconday.setAttribute('data-icon', false);
            iconday.classList.remove('holiday');
            iconday.querySelector('.bk-lg-icon').remove();

            iconday._tippy.disable();

            iconday.removeAttribute('data-tippy-content');
          } else {
            d.querySelector('.bk-dayhasicon input').classList.remove('bk-busy');
            iconday.setAttribute('data-icon', true);
            iconday.classList.add('holiday');
            iconday.insertAdjacentHTML('afterbegin', "<div class=\"bk-lg-icon\"><i class=\"".concat(bkcals.getAttribute('data-icon'), "\"></i></div>"));
          }
        }
      });
    } // edit popup from list


    function listUpdate() {
      var bkedit = d.querySelectorAll('.bk-edit');

      if (bkedit.length) {
        bkedit.forEach(function (edit) {
          edit.addEventListener('click', function (e) {
            var day = edit.getAttribute('data-day'),
                id = edit.getAttribute('data-id');
            var data = {
              action: 'call',
              security: Ajax.security,
              type: 'listpopup',
              id: id,
              parent: parent.getAttribute('data-cal'),
              first: parent.getAttribute('data-t1'),
              last: parent.getAttribute('data-t2')
            };
            var postdata = new FormData();

            for (var i in data) {
              postdata.append(i, data[i]);
            }

            fetch(Ajax.ajaxurl, {
              method: 'POST',
              credentials: 'same-origin',
              body: postdata
            }).then(function (response) {
              return response.json();
            }).then(function (json) {
              openEditableLayer(json, sweetalert);
            }).catch(function (err) {
              console.log(err);
            });
          });
        });
      }
    } // editable layer open


    function openEditableLayer(json, sa, el, type) {
      var listing = json,
          listed = listing.listed,
          templates = listing.templates,
          loc_template = listing.loc_template,
          specific = listing.specific,
          list = '',
          timewrite,
          booked = false,
          edited = false,
          popType = ''; // New merged fields

      listed.forEach(function (el) {
        var timewrite = el.value;

        if (el.key != 'booked' && el.key != 'edited') {
          if (el.key == 'Booking session') {
            if (el.value == 'first') {
              timewrite = 'Morning session';
            } else if (el.value == 'last') {
              timewrite = 'Afternoon session';
            } else {
              timewrite = 'Full session';
            }
          }
        }

        if (el.key == 'booked' && el.value == 'true') {
          booked = true;
        }

        if (el.key == 'edited' && el.value == 'true') {
          edited = true;
        }
      }); // set booking type for filters

      if (booked && edited) {
        popType = 'edited';
      } else if (booked) {
        popType = 'booked';
      } else {
        popType = 'client';
      } // setup for loc if 2 half day


      var limboth = '',
          loclock = '';

      if (d.querySelector('.bk-date.haspop').classList.contains('bk-booked--half')) {
        limboth = 'disabled';

        if (!d.querySelector('.bk-date.haspop').classList.contains('bk-blank--both')) {
          loclock = 'disabled';
        } else {
          loclock = 'both';
        }
      }

      var filtertemplates = templates.filter(function (template) {
        if (!template.type.includes('title')) {
          return template;
        }
      });
      var filterlisted = listed.filter(function (listing) {
        if (!listing.key.includes('booked') && !listing.key.includes('edited') && !listing.key.includes('booking_day') && !listing.key.includes('Booking session')) {
          if (listing.key != 'location') {
            return listing;
          }
        }
      }); // loads first 3 fields

      listed.forEach(function (input) {
        if (input.key != 'booked' && input.key != 'edited') {
          if (input.key == 'booking_day') {
            list += "<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>Booking Day:</label><br>\n\t\t\t\t\t\t\t\t\t\t<input id=\"editclientdate\" class=\"salsa-calendar-input\" autocomplete=\"off\" data-predate=\"".concat(input.value, "\" name=\"").concat(input.key, "\" type=\"text\" value=\"").concat(input.value, "\">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (input.key == 'Booking session') {
            var types;

            if (input.value == 'first') {
              timewrite = 'first';
              types = "\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"first\" selected data-bkactive=\"first\">Morning session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"last\" ".concat(limboth, ">Afternoon session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"full\" disabled>Full session</option>\n\t\t\t\t\t\t\t\t\t\t");
            } else if (input.value == 'last') {
              timewrite = 'last';
              types = "\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"first\" ".concat(limboth, ">Morning session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"last\" selected data-bkactive=\"last\">Afternoon session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"full\" disabled>Full session</option>\n\t\t\t\t\t\t\t\t\t\t");
            } else {
              timewrite = 'full';
              types = "\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"first\">Morning session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"last\">Afternoon session</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"full\" selected data-bkactive=\"full\">Full session</option>\n\t\t\t\t\t\t\t\t\t\t";
            }

            list += "<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label>Booking Session:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"".concat(input.key, "\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t").concat(types, "\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t</div>");
          } else if (input.key == 'location') {
            var locs = '',
                lochalf;

            if (popType == 'edited') {
              // edited bookoff
              lochalf = input.value;
            } else if (popType == 'booked') {
              // blank bookoff
                lochalf = input.value;
              if (el.getAttribute('data-names').indexOf('Booked off edited') > -1 || el.getAttribute('data-client') == 'true') {
                lochalf = el.getAttribute('data-clientloc');
              } else {
                locs = '<option disabled selected>Select location</option>';
              }
            } else {
              // client
              lochalf = input.value;
            }

            loc_template.forEach(function (location) {
              if (loclock == 'both') {
                locs += "<option name=\"".concat(location.name, "\">").concat(location.value, "</option>");
              } else {
                if (location.value == lochalf) {
                  locs += "<option name=\"".concat(location.name, "\" selected data-bklocset>").concat(location.value, "</option>");
                } else {
                  locs += "<option name=\"".concat(location.name, "\" ").concat(loclock, ">").concat(location.value, "</option>");
                }
              }
            });
            list += "<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label>Location:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"".concat(input.key, "\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t").concat(locs, "\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t</div>");
          }
        }
      });

      if (filterlisted.length) {
        // this filter matches template arr for client booking
        templates.forEach(function (el, i) {
          var key = el.key,
              value = el.value,
              type = el.type,
              required = el.required,
              filtervalue;

          if (type == 'text') {
            filterlisted.forEach(function (formval) {
              if (formval.key == key) {
                filtervalue = formval.value;
              }
            });
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"text\" value=\"").concat(filtervalue, "\">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'email') {
            filterlisted.forEach(function (formval) {
              if (formval.key == key) {
                filtervalue = formval.value;
              }
            });
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"email\"  value=\"").concat(filtervalue, "\">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'number') {
            filterlisted.forEach(function (formval) {
              if (formval.key == key) {
                filtervalue = formval.value;
              }
            });
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"tel\" pattern=\"[0-9.]*\" value=\"").concat(filtervalue, "\">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'textarea') {
            filterlisted.forEach(function (formval) {
              if (formval.key == key) {
                filtervalue = formval.value;
              }
            });
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<textarea name=\"").concat(key, "\">").concat(filtervalue, "</textarea>\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'title') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template bk-template-title\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value, "</label>\n\t\t\t\t\t\t\t\t\t</div>");
          } else {
            filterlisted.forEach(function (formval) {
              if (formval.key == 'sf_form_file_upload') {
                filtervalue = formval.value;
                list += "\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label>Type in the URL for the file".concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"text\" value=\"").concat(filtervalue, "\">\n\t\t\t\t\t\t\t\t\t\t\t</div>");
              }
            });
          }
        }); // filterlisted.forEach((input,i) => {
        // 	if(input.type == 'text'){
        // 		list += `
        // 		<div class="admin-popup-item bk-template">
        // 			<label>${filtertemplates[i].value}${input.required ? '*':''}</label><br>
        // 			<input name="${filtertemplates[i].key}" type="text" value="${input.value}">
        // 		</div>`;
        // 	}else if(input.type == 'email'){
        // 		list += `
        // 		<div class="admin-popup-item bk-template">
        // 			<label>${filtertemplates[i].value}${input.required ? '*':''}</label><br>
        // 			<input name="${filtertemplates[i].key}" type="email"  value="${input.value}">
        // 		</div>`;
        // 	}else if(input.type == 'number'){
        // 		list += `
        // 		<div class="admin-popup-item bk-template">
        // 			<label>${filtertemplates[i].value}${input.required ? '*':''}</label><br>
        // 			<input name="${filtertemplates[i].key}" type="tel" pattern="[0-9.]*" value="${input.value}">
        // 		</div>`;
        // 	}else if(input.type == 'textarea'){
        // 		list += `
        // 		<div class="admin-popup-item bk-template">
        // 			<label>${filtertemplates[i].value}${input.required ? '*':''}</label><br>
        // 			<textarea name="${filtertemplates[i].key}" value="${input.value}"></textarea>
        // 		</div>`;
        // 	}else if(input.type == 'title'){
        // 		list += `
        // 		<div class="admin-popup-item bk-template bk-template-title">
        // 			<label>${input.value}</label><br>
        // 		</div>`;
        // 	}else{
        // 		list += `
        // 		<div class="admin-popup-item bk-template">
        // 			<label>Type in the URL for the file${input.required ? '*':''}</label><br>
        // 			<input name="${filtertemplates[i].key}" type="text" value="${input.value}">
        // 		</div>`;
        // 	}
        // })
      } else {
        // this populates fields for bookoff
        templates.forEach(function (el) {
          var key = el.key,
              value = el.value,
              type = el.type,
              required = el.required;

          if (type == 'text') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"text\" ").concat(required ? 'required' : '', ">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'email') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"email\" ").concat(required ? 'required' : '', ">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'number') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"tel\" pattern=\"[0-9.]*\" ").concat(required ? 'required' : '', ">\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'textarea') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value).concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<textarea name=\"").concat(key, "\" ").concat(required ? 'required' : '', "></textarea>\n\t\t\t\t\t\t\t\t\t</div>");
          } else if (type == 'title') {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template bk-template-title\">\n\t\t\t\t\t\t\t\t\t\t<label>".concat(value, "</label><br>\n\t\t\t\t\t\t\t\t\t</div>");
          } else {
            list += "\n\t\t\t\t\t\t\t\t\t<div class=\"admin-popup-item bk-template\">\n\t\t\t\t\t\t\t\t\t\t<label>Type in the URL for the file".concat(required ? '*' : '', "</label><br>\n\t\t\t\t\t\t\t\t\t\t<input name=\"").concat(key, "\" type=\"text\" ").concat(required ? 'required' : '', ">\n\t\t\t\t\t\t\t\t\t</div>");
          }
        });
      } // End New merged fields


      sa.fire({
        title: "<strong>Booking info: ".concat(specific.name, "</strong>"),
        type: false,
        animation: false,
        customClass: 'animated bk-animated zoomIn bk-dark',
        width: '64rem',
        customContainerClass: "sweetalert-shiftdown",
        html: "\n\t\t\t\t\t\t<form id=\"updateBooking\"><div class=\"admin-popup-details\">".concat(list, "</div></form>\n\t\t\t\t\t"),
        showCloseButton: true,
        showCancelButton: true,
        showConfirmButton: true,
        confirmButtonText: 'Update booking',
        cancelButtonText: 'Delete booking',
        cancelButtonColor: '#c03',
        preConfirm: function preConfirm() {
          var values = [];
          var fields = d.querySelectorAll('.bk-template input,.bk-template textarea');
          fields.forEach(function (input) {
            var thefield = {
              name: input.name,
              value: input.value,
              type: input.type,
              required: input.required
            };
            values.push(thefield);
          });
          var booking_slot = {
            name: 'booking_type',
            value: d.querySelector('.bk-template select[name="Booking session"]').value,
            type: 'select',
            required: true
          },
              location = {
            name: 'location',
            value: d.querySelector('.bk-template select[name="location"]').value,
            type: 'select',
            required: true
          };
          values.push(location);
          values.push(booking_slot);
          var uperr = '',
              reg = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

          for (var i = 0; i < values.length; i++) {
            // only required
            if (values[i].name != 'sf-form-file') {
              if (values[i].required == true) {
                if (values[i].value == '') {// uperr = 'empty'
                  // break
                } else {
                  if (values[i].name == 'booking_type') {
                    if (values[i].value == 'Select session') {
                      uperr = 'session';
                      break;
                    }
                  }

                  if (values[i].name == 'location') {
                    if (values[i].value == 'Select location') {
                      uperr = 'location';
                      break;
                    }
                  }

                  if (values[i].type == 'email') {
                    if (!reg.test(values[i].value)) {// uperr = 'email'
                      // break
                    }
                  }

                  if (values[i].type == 'tel') {
                    if (!isNaN(parseFloat(values[i].value)) && isFinite(values[i].value) && values[i].value.length > 5) {} else {// uperr = 'number'
                      // break
                    }
                  }
                }
              }
            }
          }

          if (uperr == 'empty') {
            alert('Please check the fields\nA required field is empty.');
            return false;
          }

          if (uperr == 'session') {
            alert('Please select a session');
            return false;
          }

          if (uperr == 'location') {
            alert('Please select a location');
            return false;
          }

          if (uperr == 'email') {
            alert('Please make sure all email adresses are valid');
            return false;
          }

          if (uperr == 'number') {
            alert('Please make sure all phone numbers are valid');
            return false;
          }

          if (uperr == '') {
            return Promise.resolve(values);
          }
        }
      }).then(function (result) {
        // add required and type validation 
        if (result.dismiss === 'cancel') {
          sa.fire({
            title: 'Are you sure you want <br>to delete/reject this item?',
            text: "This session will be deleted permanantly and cannot be brought back.",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
          }).then(function (result) {
            if (result.dismiss != 'cancel' && result.dismiss != 'backdrop') {
              fetch(d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/delete_frompop.php', {
                method: 'POST',
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  id: specific.id
                })
              }).then(function (response) {
                return response.json();
              }).then(function (data) {
                if (data == 'success') {
                  sa.fire({
                    title: 'Deleted!',
                    text: 'This session has been deleted..',
                    type: 'success',
                    showConfirmButton: false,
                    timer: 1800
                  }).then(function (result) {
                    var theday = d.querySelector('.bk-date.haspop');

                    if (theday.classList.contains('bk-date--booked') && theday.classList.contains('bk-booked--half')) {
                      // date has two half bookings
                      rmBooking('half2', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, specific.id);
                    } else if (theday.classList.contains('bk-date--half')) {
                      // date has one half booking
                      rmBooking('half1', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, specific.id);
                    } else if (theday.classList.contains('bk-date--booked')) {
                      // date has one full booking
                      rmBooking('full', d.querySelector(".bk-srcdelete[data-day=\"".concat(theday.getAttribute('data-calendar-date'), "\"]")), theday, specific.id);
                    }
                  });
                } else {
                  sa.fire({
                    title: 'Error Deleting!',
                    text: 'This session could not be deleted..',
                    type: 'error',
                    showConfirmButton: false,
                    timer: 1800
                  }).then(function (result) {
                    window.location.reload();
                  });
                }
              });
            } else {
              // this is the delete from edit page
              if (type == 'haspop') {
                el.classList.remove('haspop');
                el.classList.remove('bk-date--selected');
              }
            }
          });
        } else if (result.dismiss != 'close' && result.dismiss != 'backdrop') {
          fetch(d.querySelector('.bk-booking-list').getAttribute('data-url') + '/process/update_frompop.php', {
            method: 'POST',
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              id: specific.id,
              fields: result.value,
              type: popType,
              parent: d.querySelector('#bk-calendar').getAttribute('data-cal')
            })
          }).then(function (response) {
            return response.json();
          }).then(function (data) {
            if (data == 'success') {
              sa.fire({
                title: 'Updated!',
                text: 'This session has been updated..',
                type: 'success',
                showConfirmButton: false,
                timer: 1800
              }).then(function (result) {
                window.location.reload();
              });
            } else {
              sa.fire({
                title: 'Error Updating!',
                text: 'This session could not be edited..',
                type: 'error',
                showConfirmButton: false,
                timer: 1800
              }).then(function (result) {
                window.location.reload();
              });
            }
          }).catch(function (err) {
            sa.fire({
              title: 'Error Updating!',
              text: 'This session could not be edited..',
              type: 'error',
              showConfirmButton: false,
              timer: 1800
            }).then(function (result) {
              window.location.reload();
            });
          });

          if (type == 'haspop') {
            el.classList.remove('haspop');
            el.classList.remove('bk-date--selected');
          }
        } else {
          if (type == 'haspop') {
            el.classList.remove('haspop');
            el.classList.remove('bk-date--selected');
          }
        }
      });
      var clientdate = document.querySelector('input#editclientdate');
      clientdate.DatePickerX.init({
        mondayFirst: false,
        format: 'dd.mm.yyyy',
        minDate: new Date(),
        todayButton: true,
        todayButtonLabel: 'Today',
        clearButton: false
      });
    } // Ready


    domReady(function () {
      init();
    });
  })(jQuery);
  /***/

}]);